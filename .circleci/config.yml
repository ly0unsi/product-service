version: 2.1
machine:
  node:
    version: 5.8.0
  services:
    - docker
jobs:
  build:
    docker:
      - image: maven:3.8.3-openjdk-17 # Use a Docker image with JDK 8
    steps:
      - checkout # Checkout the source code
      - setup_remote_docker

      - run:
          name: Build and Package
          command: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=lyounsi.azurecr.io/product-service:latest # Build the Spring Boot application
            echo "$DOCKER_PASSWORD" | docker login lyounsi.azurecr.io -u "$DOCKER_USERNAME" --password-stdin
            docker push lyounsi.azurecr.io/product-service:latest # Push the image to ACR

  deploy:
    docker:
      - image: microsoft/azure-cli:latest # Use Azure CLI image for deployment
    steps:
      - setup_remote_docker
      - checkout # Checkout the source code
      - run:
          name: Deploy to AKS
          command: |
            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME
            kubectl apply -f .\k8s\deployment.yaml  # Apply your Kubernetes deployment configuration
            kubectl apply -f .\k8s\service.yaml  # Apply your Kubernetes deployment configuration

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main # Adjust branch as needed
